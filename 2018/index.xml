<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2018s on 别捉急</title><link>https://zhaohuxing.github.io/2018/</link><description>Recent content in 2018s on 别捉急</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 02 Dec 2018 08:05:00 +0000</lastBuildDate><atom:link href="https://zhaohuxing.github.io/2018/index.xml" rel="self" type="application/rss+xml"/><item><title>Function Annotation/f-strings Self Experience</title><link>https://zhaohuxing.github.io/2018/2018-12-02-python-function-annotation-and-fstring/</link><pubDate>Sun, 02 Dec 2018 08:05:00 +0000</pubDate><guid>https://zhaohuxing.github.io/2018/2018-12-02-python-function-annotation-and-fstring/</guid><description>Function Annotation 以前只知道 Python 不需要指定类型，写个方法也不需要带类型，如下所示：
def add(a, b): return a + b 按照如上的写法，并伴随着项目一点一点变大，很容易搞混参数类型，导致一些不必要的问题。
Function Annotation 提供了很好的解决方案，可以让我们指定参数，有点像写静态语言的感觉。
def add(a:int, b:int) -&amp;gt; int: return a + b Literal String Interpolation 在 Python 中，常用的字符串拼接方法有：%-formatting, str.format.
msg = &#39;disk failure&#39; # %-formatting print(&#39;error: %s&#39; % msg) # str.format print(&#39;error: {}&#39;.format(msg)) 如上，可读性是不是很差？！Literal String Interpolation such as f-strings 解决可读性差的痛点。
msg = &#39;disk failure&#39; # f-strings print(f&#39;error: {msg}&#39;) 使用过程中, dict 里的值解析不出来，len() 后的值也解析不出来，有点尴尬!</description></item></channel></rss>